Natural Language Processing (NLP) 란 무엇인가?

자연어 (Natural Language) 란 인간이 실생활에서 사용하는 언어를 말하며, 자연어 처리 (Natural Language Processing) 이란
자연어의 의미를 분석하여 컴퓨터가 처리할 수 있도록 하는 일을 말합니다.
인간의 언어는 의미를 전달하기 위한 어떤 구조적인 체계입니다.
예를 들어 "말을 하다." 와 "말이 달린다." 두 문장에서 말은 다른 의미를 지닙니다.
이에 따라 NLP는 다른 머신러닝이나 컴퓨터 비전과는 매우 다른 성격을 지닙니다.
NLP는 아주 쉬운 영역부터 어려운 영역까지 다양한 과제가 있습니다.
쉬운 영역으로는 오타 확인, 키워드 찾기, 동의어 찾기, 문서 분해 (Parsing information from documents) 등이 있고,
어려운 영역으로는 기계 번역, 의미 분석, 질의 응답 등이 있습니다.

Word vectors

컴퓨터가 자연어를 처리하기 위한 첫 번째 관문은 컴퓨터가 인지할 수 있게 단어(words)를 표현하는 것 입니다.
세상에는 많은 단어 토큰이 존재하지만, 모든 토큰이 독립적이지 않습니다.
예를 들어, 영어에는 Feline 과 Cat 같은 관계, 한국어에는 개와 강아지처럼 서로 완벽하게 독립이 아닌 단어 관계가 많이 있습니다.
이러한 단어 토큰을 벡터화하고, 어떤 '단어의 공간'으로 인코딩하고자 하는 생각을 자연스럽게 할 수 있습니다.
이렇게 단어를 벡터화한 것을 word vector 라고 부릅니다.

가장 기초적이고, 다른 표현 방법의 뼈대가 되는 표현 방법인 one-hot-encoding 방식으로 word vector를 만들고, 이를 이용하여 후처리하는 방법으로 단어 공간으로 인코딩시킵니다.

One-hot encoding을 자세히 살펴보겠습니다. 먼저 |V| 크기의 단어가 있다고 가정하겠스니다. 그러면 우리는 단어를 다음과 같이 표현할 수 있습니다. 

One-hot encoding 방법은 크게 상호 독립적이라는 것과 데이터 공간을 많이 사용한다는 두 가지 문제점을 갖고 있습니다.
먼저 상호 독립적이라는 말은
..
두 단어간에 비슷한 의미를 무시하게 됩니다.
이러한 one-hot encoding을 모아두면 행렬이 많이 필요하게 되어 데이터를 저장할 메모리를 많이 차지하는 문제점이 있습니다.

Word Embedding

Word Embedding 이란 단어 벡터의 차원을 작은 차원으로 축소하고, 벡터의 형태가 sparse 하지 않고 dense 하도록 하는 일련의 작업을 의미합니다. 
Singular Value Decomposition을 다루고, Word Embedding의 중추적인 역할을 하는 Word2Vec, Glove

Word Matrix

SVD One-hot encoding 과 비슷한 방법에, 벡터를 단어를 count 기반 표현하여 데이터화 (행렬화) 하는 것을 word matrix 라고 부릅니다.

Word-Document Matrix

Word-Document Matrix 는 한 문서에 단어의 등장 횟수를 행렬로 나타내는 방법입니다.
Word-Document Matrix 는 관계가 있는 단어가 같은 문서에서 빈번하게 등장할 것이라는 대전제에서 출발합니다.
예를 들어, 금융 관련 문서에 '은행', '주식', '채권', '돈', '금' 등이 같이 등장하는 상황을 말합니다.
...

Window based Co-occurrence Matrix

Word-Document Matrix 는 문서 단위였다면, Window based co-occurrence matrix는 문장의 window 단위 입니다.
여기에서 window는 문장에서 한 번에 몇 단어 (혹은 몇 말뭉치 (corpus)) 를 카운트 할 크기를 의미합니다.

SVD 기반 방법

SVD 기반 방법은 앞에서 만들어진 word matrix를 X라고 하면, X를 분리하고 분리된 값을 word embedding 의 결과로 사용하는 것 입니다.

Word Embedding 의 목적은 의미있게 차원을 축소하여 워드 벡터를 dense 하게 표현하는 것이 목적이라고 했습니다.

SVD 기반 방법의 단점

새로운 단어가 추가되면 다시 계산해줘야 된다는 문제
행렬에 0으로 코딩되는 자리가 많아서 비효율적
단어의 수가 많아지면 행렬이 커져 계산이 비효율적

이런 단점을 극복하고자 나온 방법이 Word2vec
