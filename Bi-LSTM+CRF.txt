양방향 LSTM 과 CRF (Bidirectional LSTM + CRF)

이번 챕터에서는 기존의 양방향 LSTM 모델에 CRF (Conditional Random Field) 라는 새로운 층을 추가하여 보다 모델을 개선시킨 양방향
LSTM + CRF 모델을 사용하여 개체명 인식(Named Entity Recognition)을 수행합니다.

이번 챕터는 텐서플로우와 케라스 버전이 다른 실습과는 다른 버전에서 동작하므로 구글의 Colab 사용을 권장

1. CRF(Conditional Random Field)

CRF는 Conditional Random Field 의 약자로 양방향 LSTM을 위해 탄생한 모델이 아니라 이전에 독자적으로 존재해왔던 모델입니다.
이를 양방향 LSTM 모델 위에 하나의 층으로 추가하여, 양방향 LSTM + CRF 모델이 탄생하였습니다.
여기서는 CRF의 수식적 이해가 아니라 양방향 LSTM + CRF 모델의 직관에 대해서 이해합니다.

CRF 층의 역할을 이해하기 위해서 간단한 개체명 인식 작업의 예를 들어보겠습니다.
사람(Person), 조직(Organization) 두 가지만을 태깅하는 간단한 태깅 작업에 BIO 표현을 사용한다면 여기서 사용하는 태깅의 종류는 5가지입니다.

B-Per, I-Per, B-Org, I-Org, O

아래의 그림은 위의 태깅을 수행하는 기존의 양방향 LSTM 개체명 인식 모델의 예를 보여줍니다.

위 모델은 각 단어를 벡터로 입력받고, 모델의 출력층에서 활성화 함수를 통해 개체명을 예측합니다. 사실 입력 단어들과 실제 개체명이 무엇인지 모르는
상황이므로 이 모델이 정확하게 개체명을 예측했는지는 위 그림만으로는 알 수 없습니다. 또 다른 예를 보겠습니다.

위 모델은 명확히 틀린 예측을 포함하고 있습니다. 입력 단어들과 실제값의 여부와 상관없이 이 사실을 알 수 있습니다.
BIO 표현에 따르면 우선, 첫번째 단어의 레이블에서 I가 등장할 수 없습니다. 또한 I-Per은 반드시 B-Per 뒤에서만 등장할 수 있습니다.
뿐만 아니라, I-Org도 마찬가지로 B-Org 뒤에서만 등장할 수 있는데 위 모델은 이런 BIO 표현 방법의 제약사항들을 모두 위반하고 있습니다. 

여기서 양방향 LSTM 위에 CRF 층을 추가하여 얻을 수 있는 이 점을 언급하겠습니다.
CRF 층을 추가하면 모델을 예측 개체명, 다시 말해 레이블 사이의 의존성을 고려할 수 있습니다. 아래의 그림은 양방향 LSTM + CRF 모델을 보여줍니다.

앞서 봤듯이, 기존에 CRF 층이 존재하지 않았던 양방향 LSTM 모델은 활성화 함수를 지난 시점에서 개체명을 결정했지만, CRF 층을 추가한 모델에서는
활성화 함수의 결과들이 CRF 층의 입력으로 전달됩니다. 예를 들어 word1 에 대한 BiLSTM 셀과 활성화 함수를 지난 출력값 [0.7, 0.12, 0.08, 0.04, 0.06]은 CRF 층의 입력이 됩니다. 마찬가지로 모든 단어에 대한 활성화 함수를 지난 출력값은 CRF 층의 입력이 되고, CRF 층은 레이블 시퀀스에 대해서 가장 높은 점수를 가지는 시퀀스를 예측합니다.

이러한 구조에서 CRF 층은 점차적으로 훈련 데이터로부터 아래와 같은 제약사항 등을 학습하게 됩니다.

1. 문장의 첫번째 단어에서는 I가 나오지 않습니다.
2. O-I 패턴은 나오지 않습니다.
3. B-I-I 패턴에서 개체명은 일관성을 유지합니다. 예를 들어 B-Per 다음에 I-Org는 나오지 않습니다.

요약하면 양방향 LSTM은 입력 단어에 대한 양방향 문맥을 반영하며, CRF는 출력 레이블에 대한 양방향 문맥을 반영합니다.

~~> google colab read data path problem

이번에 사용할 데이터는 앞서 사용한 데이터랑 양식이 조금 다릅니다.
첫 번째 열은 다음과 같은 패턴을 가지고 있습니다.
Sentence : 1 있고 Null 값이 이어지다가 다시 Sentence : 2 가 나오고 다시 Null 값이 이어지다가 Sentence : 3 이 나오고 다시 Null 값이
이어지다가를 반복합니다. 그런데 사실 이는 하나의 문장을 여러 행으로 나눠놓은 것입니다. 숫자값을 t라고 합시다.
첫 번째 Sentence : t 부터 Null 값이 나오다가 Sentence : t+1이 나오기 전까지의 모든 데이터는 원래 하나의 행.
즉, 하나의 샘플이어야 합니다. t번째 문장을 각 단어마다 각 하나의 행으로 나눠놓은 데이터이기 때문입니다.
이는 뒤에서 Pandas의 fillna를 통해 하나로 묶는 작업을 해줍니다.
